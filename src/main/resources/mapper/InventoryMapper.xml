<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shinsegae.project.inventory.mapper.InventoryMapper">

    <!-- 재고 전체 내용 조회 -->
    <select id="selectInventoryAll"
            resultType="com.shinsegae.project.inventory.vo.InventoryManagementDTO">
        SELECT c.item_classification,
               i.code,
               p.product_name,
               w.warehouse_name,
               m.manufacturer_name,
               i.price,
               i.stock
        FROM inventory i
                 JOIN product p ON p.product_code = i.product_code
                 JOIN manufacture m ON i.manufacturer_code = m.manufacturer_code
                 JOIN warehouse w ON i.warehouse_id = w.warehouse_id
                 JOIN classification c ON i.code = c.code;
    </select>

    <!-- 재고 드롭다운 필터링 -->
    <select id="getInventoryByContent"
            parameterType="string"
            resultType="com.shinsegae.project.inventory.vo.InventoryManagementDTO">
        SELECT
            c.item_classification,
            p.product_name,
            w.warehouse_name,
            m.manufacturer_name,
            i.price,
            i.stock
        FROM
            inventory i
                JOIN product p ON p.product_code = i.product_code
                JOIN manufacture m ON i.manufacturer_code = m.manufacturer_code
                JOIN warehouse w ON i.warehouse_id = w.warehouse_id
                JOIN classification c ON i.code = c.code
        WHERE
            c.item_classification = #{item_classification}
    </select>

    <!-- 재고 수량만 변경할수 있도록 구현 -->
    <update id="updateStock" parameterType="map">
        UPDATE inventory
        SET stock = #{stock}
        WHERE code = #{code}
    </update>

    <!-- 새로운 재고 추가 기능-->
    <insert id="insertInventory"
            parameterType="com.shinsegae.project.inventory.vo.InventoryManagementDTO">
        <!-- SQL문 추후 작성 -->
        INSERT INTO inventory (code, product_code, manufacturer_code, warehouse_id, price, stock)
        VALUES (
                (SELECT code FROM classification WHERE item_classification = #{itemClassification}),
                (SELECT product_code FROM product WHERE product_name = #{productName}),
                (SELECT manufacturer_code FROM manufacture WHERE manufacturer_name = #{manufacturerName}),
                (SELECT warehouse_id FROM warehouse WHERE warehouse_name = #{warehouseName}),
                #{price},
                #{stock}
        )
    </insert>

    <!-- 재고 삭제 기능 -->
    <delete id="deleteInventory"
            parameterType="string">
        DELETE FROM inventory WHERE code = #{code}
    </delete>

</mapper>